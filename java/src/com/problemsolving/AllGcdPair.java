package com.problemsolving;

import java.util.*;

class AllGcdPairSolution {
    int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        int n = A.size();
        int sqrtN = (int) Math.sqrt(n);
        Collections.sort(A, Collections.reverseOrder());
        int[] freq = new int[A.get(0) + 1];
        for (int num : A)
            freq[num]++;
        ArrayList<Integer> result = new ArrayList<>();
        for (int i = 0; i < sqrtN; i++)
            result.add(0);
        int g, rIdx = 0;
        for (int aIdx = 0; aIdx < n; aIdx++) {
            if (freq[A.get(aIdx)] != 0) {
                if (rIdx < result.size()) {
                    result.set(rIdx, A.get(aIdx));
                    freq[result.get(rIdx)]--;
                    rIdx++;
                } else {
                    break;
                }
                for (int i = 0; i < rIdx; i++) {
                    if (A.get(aIdx) != result.get(i)) {
                        g = gcd(A.get(aIdx), result.get(i));
                        freq[g] -= 2;
                    }
                }
            }
        }
        return result;
    }

    public ArrayList<Integer> solve2(ArrayList<Integer> A) {
        ArrayList<Integer> ans = new ArrayList<>();
        Collections.sort(A, Collections.reverseOrder());
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < A.size(); i++) {
            int curr = A.get(i);
            if (map.containsKey(curr) && map.get(curr) > 0)
                map.put(curr, map.get(curr) - 1);
            else {
                for (int j = 0; j < ans.size(); j++) {
                    int g = gcd(ans.get(j), curr);
                    map.put(g, map.getOrDefault(g, 0) + 2);
                }
                ans.add(curr);
            }
        }
        return ans;
    }
}

public class AllGcdPair {
    public static void main(String[] args) {
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(2, 2, 2, 2, 8, 2, 2, 2, 10));
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(5, 5, 5, 15));
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(8, 6, 4, 4, 4, 2, 2, 2, 2));
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(46, 1, 2, 1, 1, 1, 5, 45, 1, 1, 2, 5, 1, 40, 1, 1, 1, 1, 1, 1, 1, 1, 1, 31, 1));
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 44, 1, 1, 1, 1, 1, 49, 1, 1, 1, 1, 1, 43));
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(1, 31, 1, 1, 1, 1, 14, 2, 1, 1, 1, 2, 22, 1, 11, 1, 1, 1, 1, 23, 1, 1, 11, 1, 11));
//        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(634, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 844, 4, 4, 2, 2, 1, 2, 2, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 4, 2, 4, 780, 20, 10, 6, 1, 2, 26, 4, 1, 15, 12, 5, 3, 1, 1, 1, 4, 65, 12, 1, 1, 5, 20, 2, 4, 20, 140, 70, 2, 1, 2, 2, 4, 1, 5, 28, 35, 7, 1, 1, 1, 28, 5, 28, 1, 1, 5, 140, 2, 2, 10, 70, 490, 2, 1, 2, 2, 2, 1, 5, 14, 35, 7, 1, 1, 1, 14, 5, 14, 1, 1, 5, 70, 2, 2, 6, 2, 2, 726, 1, 2, 22, 2, 1, 3, 6, 1, 33, 1, 1, 11, 2, 1, 6, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 677, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 86, 2, 2, 1, 1, 2, 1, 1, 1, 1, 43, 2, 2, 1, 1, 1, 1, 2, 2, 2, 26, 2, 2, 22, 1, 2, 286, 2, 1, 1, 2, 1, 11, 1, 1, 11, 2, 13, 2, 1, 1, 1, 2, 2, 4, 4, 4, 2, 2, 1, 2, 2, 376, 1, 1, 8, 1, 1, 1, 1, 1, 4, 1, 8, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 359, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 5, 5, 3, 1, 1, 1, 1, 1, 3, 75, 5, 3, 1, 1, 1, 1, 25, 3, 1, 1, 5, 25, 2, 4, 12, 28, 14, 6, 1, 2, 2, 8, 1, 3, 168, 7, 21, 1, 1, 1, 28, 1, 168, 1, 1, 1, 28, 1, 1, 5, 35, 35, 1, 1, 1, 1, 1, 1, 5, 7, 595, 7, 1, 1, 1, 7, 5, 7, 1, 1, 5, 35, 1, 1, 3, 7, 7, 33, 1, 1, 11, 1, 1, 3, 21, 7, 693, 1, 1, 11, 7, 1, 21, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 943, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 43, 11, 1, 1, 1, 1, 1, 11, 1, 1, 473, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 28, 14, 2, 1, 2, 2, 4, 1, 1, 28, 7, 7, 1, 1, 1, 28, 1, 28, 1, 1, 1, 28, 1, 1, 65, 5, 5, 1, 1, 1, 13, 1, 1, 25, 1, 5, 1, 1, 1, 1, 1, 325, 1, 1, 1, 5, 25, 2, 4, 12, 28, 14, 6, 1, 2, 2, 8, 1, 3, 168, 7, 21, 1, 1, 1, 28, 1, 168, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 619, 1, 1, 1, 1, 5, 5, 5, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 1, 1, 1, 1, 5, 1, 1, 1, 635, 5, 2, 4, 20, 140, 70, 2, 1, 2, 2, 4, 1, 25, 28, 35, 7, 1, 1, 1, 28, 25, 28, 1, 1, 700, 5));
        ArrayList<Integer> A = new ArrayList<>(Arrays.asList(1, 299, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 866, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 714, 2, 1, 17, 2, 6, 2, 34, 1, 14, 1, 2, 1, 6, 21, 2, 6, 3, 2, 1, 1, 6, 1, 1, 2, 2, 622, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 131, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 187, 1, 11, 1, 17, 11, 1, 1, 1, 1, 1, 11, 1, 11, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 256, 4, 4, 8, 1, 2, 1, 4, 1, 16, 1, 2, 8, 1, 4, 1, 1, 2, 1, 1, 2, 6, 2, 1, 11, 4, 396, 4, 4, 11, 2, 1, 4, 1, 36, 99, 2, 396, 3, 4, 1, 1, 18, 1, 1, 2, 2, 2, 1, 1, 4, 4, 596, 4, 1, 2, 1, 4, 1, 4, 1, 2, 4, 1, 4, 1, 1, 2, 1, 1, 2, 34, 2, 1, 17, 8, 4, 4, 136, 1, 2, 1, 4, 1, 8, 1, 2, 8, 1, 4, 1, 1, 2, 1, 1, 1, 1, 1, 1, 11, 1, 11, 1, 1, 407, 1, 1, 1, 1, 1, 11, 37, 11, 1, 1, 1, 1, 1, 1, 1, 2, 14, 2, 1, 1, 2, 2, 2, 2, 1, 994, 1, 2, 1, 2, 7, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 521, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 4, 4, 4, 4, 1, 2, 1, 692, 1, 4, 1, 2, 4, 1, 4, 1, 1, 2, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 713, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 6, 2, 1, 1, 16, 36, 4, 8, 1, 2, 1, 4, 1, 720, 9, 2, 72, 3, 4, 1, 5, 18, 1, 1, 1, 21, 1, 1, 11, 1, 99, 1, 1, 11, 7, 1, 1, 1, 9, 693, 1, 99, 3, 1, 1, 1, 9, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 37, 2, 1, 2, 1, 2, 1, 74, 2, 1, 2, 1, 1, 2, 1, 1, 2, 6, 2, 1, 11, 8, 396, 4, 8, 11, 2, 1, 4, 1, 72, 99, 2, 792, 3, 4, 1, 1, 18, 1, 1, 1, 3, 1, 131, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 393, 1, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 4, 4, 4, 4, 1, 2, 1, 4, 1, 4, 1, 2, 4, 1, 556, 1, 139, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 103, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 139, 1, 1, 695, 1, 1, 1, 2, 6, 2, 1, 1, 2, 18, 2, 2, 1, 2, 1, 2, 1, 18, 9, 2, 18, 3, 2, 1, 1, 738));
        AllGcdPairSolution sol = new AllGcdPairSolution();
        ArrayList<Integer> result = sol.solve2(A);
        for (int num : result)
            System.out.print(num + " ");
        System.out.println();
    }
}
